<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:easyhbase-client.properties</value>
            </list>
        </property>
    </bean>
    <context:component-scan base-package="cn.easyhbase.client.hbase,
                                          cn.easyhbase.common.hbase"/>
    <mvc:annotation-driven/>
    <bean id="hbaseConfiguration" class="cn.easyhbase.client.hbase.HbaseConfigurationFactoryBean">
        <property name="properties">
            <props>
                <prop key="hbase.zookeeper.quorum">${hbase.client.host}</prop>
                <prop key="hbase.zookeeper.property.clientPort">2181</prop>

                <!-- hbase default:true -->
                <prop key="hbase.ipc.client.tcpnodelay">${hbase.ipc.client.tcpnodelay}</prop>
                <!-- hbase default:60000 -->
                <prop key="hbase.rpc.timeout">${hbase.rpc.timeout}</prop>
                <!-- hbase default:Integer.MAX_VALUE -->
                <prop key="hbase.client.operation.timeout">${hbase.client.operation.timeout}</prop>

                <!-- hbase socket read timeout. default: 200000-->
                <prop key="hbase.ipc.client.socket.timeout.read">
                    ${hbase.ipc.client.socket.timeout.read}
                </prop>
                <!-- socket write timeout. hbase default: 600000-->
                <prop key="hbase.ipc.client.socket.timeout.write">
                    ${hbase.ipc.client.socket.timeout.write}
                </prop>

                <!-- hbase async put operation. -->
                <prop key="hbase.client.async.enable">${hbase.client.async.enable:false}</prop>
                <prop key="hbase.client.async.in.queuesize">
                    ${hbase.client.async.in.queuesize:10000}
                </prop>
                <prop key="hbase.tablemultiplexer.flush.period.ms">
                    ${hbase.client.async.flush.period.ms:100}
                </prop>
                <prop key="hbase.client.max.retries.in.queue">
                    ${hbase.client.async.max.retries.in.queue:10}
                </prop>
            </props>
        </property>
    </bean>

    <bean id="connectionFactory" class="cn.easyhbase.client.hbase.PooledHTableFactory">
        <constructor-arg ref="hbaseConfiguration"/>
        <constructor-arg value="${hbase.client.thread.max}"/>
        <constructor-arg value="${hbase.client.threadPool.queueSize}"/>
        <constructor-arg value="${hbase.client.threadPool.prestart}"/>
    </bean>

    <bean id="asyncOperation" class="cn.easyhbase.client.hbase.HBaseAsyncOperationFactory"
          factory-method="create">
        <constructor-arg value="#{connectionFactory.getConnection()}"/>
        <constructor-arg ref="hbaseConfiguration"/>
    </bean>

    <bean id="hbaseTemplate" class="cn.easyhbase.client.hbase.HbaseTemplate2">
        <property name="configuration" ref="hbaseConfiguration"/>
        <property name="tableFactory" ref="connectionFactory"/>
        <property name="enableParallelScan" value="${hbase.client.parallel.scan.enable:false}"/>
        <property name="maxThreads" value="${hbase.client.parallel.scan.maxthreads:16}"/>
        <property name="maxThreadsPerParallelScan"
                  value="${hbase.client.parallel.scan.maxthreadsperscan:4}"/>
    </bean>

    <bean id="hBaseAdminTemplate" class="cn.easyhbase.client.hbase.HBaseAdminTemplate"
          destroy-method="close">
        <constructor-arg ref="hbaseConfiguration" index="0"></constructor-arg>
    </bean>

    <bean class="org.apache.hadoop.util.ShutdownHookManagerProxy"/>

    <bean id="agentStatRowKeyDistributor"
          class="cn.easyhbase.common.hbase.distributor.RowKeyDistributorByHashPrefix">
        <constructor-arg ref="agentStatRangeHasher"/>
    </bean>

    <bean id="agentStatRangeHasher"
          class="cn.easyhbase.common.hbase.distributor.RangeOneByteSimpleHash">
        <constructor-arg type="int" value="0"/>
        <constructor-arg type="int" value="24"/>
        <constructor-arg type="int" value="32"/>
    </bean>

    <!--    <bean id="agentStatV2RowKeyDistributor"
              class="cn.easyhbase.common.hbase.distributor.RowKeyDistributorByHashPrefix">
            <constructor-arg ref="agentStatV2RangeHasher"/>
        </bean>

        <bean id="agentStatV2RangeHasher"
              class="cn.easyhbase.common.hbase.distributor.RangeOneByteSimpleHash">
            <constructor-arg type="int" value="0"/>
            <constructor-arg type="int" value="33"/>
            <constructor-arg type="int" value="64"/>
        </bean>-->

    <!--    <bean id="agentStatHbaseOperationFactory"
              class="cn.easyhbase.common.hbase.server.bo.serializer.stat.AgentStatHbaseOperationFactory">
            <constructor-arg name="rowKeyDecoder" ref="agentStatRowKeyDecoder"/>
            <constructor-arg name="rowKeyEncoder" ref="agentStatRowKeyEncoder"/>
            <constructor-arg name="rowKeyDistributor" ref="agentStatV2RowKeyDistributor"/>
        </bean>-->
</beans>